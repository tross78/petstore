<?php

/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;
use App\ApiResponse;
use App\Pet;

class PetApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation addPet
     *
     * Add a new pet to the store.
     *
     *
     * @return Http response
     */
    public function addPet()
    {
        if (!Request::has('body') ||!Request::has('body.name') || !Request::has('body.photoUrls')) {
            return response()->json(new ApiResponse(['code' => 405, 'message' => 'invalid input', 'type' => '']));
        }
        
        $category_id = Request::input('body.category_id', '');
        $name = Request::input('body.name');
        $photoUrls = Request::input('body.photoUrls');
        $tags = Request::input('body.tags', '');
        $status = Request::input('body.status', 'available');

        Pet::create([
            'name' => $name,
            'category_id' => $category_id,
            'photoUrls' => $photoUrls,
            'tags' => $tags,
            'status' => $status
        ]);

        return response()->json(new ApiResponse(['code' => 200, 'message' => 'success', 'type' => '']));
    }
    /**
     * Operation updatePet
     *
     * Update an existing pet.
     *
     *
     * @return Http response
     */
    public function updatePet()
    {
        if (!Request::has('body.id')) {
            return response()->json(new ApiResponse(['code' => 400, 'message' => 'invalid id supplied', 'type' => '']));
        }

        if (!Pet::where('id', Request::input('body.id'))->exists()) {
            return response()->json(new ApiResponse(['code' => 404, 'message' => 'pet not found', 'type' => '']));
        }

        $pet = Pet::where('id', Request::input('body.id'))->first();

        $pet->update(array_filter(Request::input('body')));

        return response()->json(new ApiResponse(['code' => 200, 'message' => 'success', 'type' => '']));
    }
    /**
     * Operation findPetsByStatus
     *
     * Finds Pets by status.
     *
     *
     * @return Http response
     */
    public function findPetsByStatus()
    {
        if (!Request::has('status')) {
            return response()->json(new ApiResponse(['code' => 400, 'message' => 'invalid status value', 'type' => '']));
        }

        $status_query = Request::input('status');

        $status = explode(",", $status_query);

        $pets = Pet::whereIn('status', $status)->get();

        return response()->json($pets);
    }
    /**
     * Operation findPetsByTags
     *
     * Finds Pets by tags.
     *
     *
     * @return Http response
     */
    public function findPetsByTags()
    {
        if (!Request::has('tags')) {
            return response()->json(new ApiResponse(['code' => 400, 'message' => 'invalid tag value', 'type' => '']));
        }

        $tags_query = Request::input('tags');

        $tags = explode(",", $tags_query);

        $pets = Pet::whereJsonContains('tags', $tags)->get();

        return response()->json($pets);
    }
    /**
     * Operation deletePet
     *
     * Deletes a pet.
     *
     * @param int $pet_id Pet id to delete (required)
     *
     * @return Http response
     */
    public function deletePet($pet_id)
    {
        if (!$pet_id) {
            return response()->json(new ApiResponse(['code' => 400, 'message' => 'invalid ID supplied', 'type' => '']));
        }

        if (!Pet::where('id', $pet_id)->exists()) {
            return response()->json(new ApiResponse(['code' => 404, 'message' => 'pet not found', 'type' => '']));
        }

        $pet = Pet::where('id', $pet_id)->first()->delete();


        return response()->json(new ApiResponse(['code' => 200, 'message' => 'success', 'type' => '']));
    }
    /**
     * Operation getPetById
     *
     * Find pet by ID.
     *
     * @param int $pet_id ID of pet to return (required)
     *
     * @return Http response
     */
    public function getPetById($pet_id)
    {
        if (!$pet_id) {
            return response()->json(new ApiResponse(['code' => 400, 'message' => 'invalid ID supplied', 'type' => '']));
        }

        if (!Pet::where('id', $pet_id)->exists()) {
            return response()->json(new ApiResponse(['code' => 404, 'message' => 'pet not found', 'type' => '']));
        }

        $pet = Pet::where('id', $pet_id)->first();


        return response()->json($pet);
    }
    /**
     * Operation updatePetWithForm
     *
     * Updates a pet in the store with form data.
     *
     * @param int $pet_id ID of pet that needs to be updated (required)
     *
     * @return Http response
     */
    public function updatePetWithForm($pet_id)
    {
        return $this->updatePet($pet_id);
    }
    /**
     * Operation uploadFile
     *
     * uploads an image.
     *
     * @param int $pet_id ID of pet to update (required)
     *
     * @return Http response
     */
    public function uploadFile($pet_id)
    {

        if (!$pet_id) {
            return response()->json(new ApiResponse(['code' => 400, 'message' => 'invalid ID supplied', 'type' => '']));
        }

        if (!Pet::where('id', $pet_id)->exists()) {
            return response()->json(new ApiResponse(['code' => 404, 'message' => 'pet not found', 'type' => '']));
        }

        // upload image
        $imageName = Request::file('file')->getClientOriginalName();
        $imageName = uniqid() . '_' . $imageName;
        $uploadPath = 'uploads';
        $destinationPath = rtrim(app()->basePath('public/' . $uploadPath), '/');
        Request::file('file')->move($destinationPath, $imageName);
        
        // add image path to pet

        $pet = Pet::where('id', $pet_id)->first();

        $photoUrls = $pet->photoUrls;

        array_push($photoUrls, ($destinationPath . '/' . $imageName));

        $pet->update([
            'photoUrls' => $photoUrls
        ]);
    }
}
